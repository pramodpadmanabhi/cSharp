Shared Resources
	The CLR assigns each thread its own local memory stack to keep local variables seperate
	A seperate copy of local variables is created on each thread's memory stack

Thread Schedulers
	Ensures all active threads are allocated appropriate exexution time
	1) Single-Processor Computers
		Timeslicing - Rapidly switching execution between each of the active threads
					- Typically takes tens of milliseconds in windows
	2) Multiprocessor Computers
		  Different threads run code simultaneously on different computers
	3) Preempted Threads
		  - Thread that has exeecution interrupted, usually by an external factor such as timeslicing
		  - Thread has no control over when and here it is preempted
  
  Threads vs Processes
	Threads - Run in parallel within a single process
			- Share memory (Share Heap Memory) with other threads running in the same application
	Processes - Are fully isolated from each other


  ThreadPool
	- Every thread has overhead in time and memory
	- Thread pools reduce the performance penalty by sharing and recycling threads
	- Thread pools only create background threads

   ThreadPool
	- Limits the number of worker threads that can run simultaneously
	- When limit is reached, all jobs form a queue and begin only when another job finishes
	
    Different Ways to Enter a Thread Pool
	- Task Parallel library
	- Asynchronous delegate
	- Background work
	- Call ThreadPool.QueueUserWorkItem

  Background Threads
    - Identical to foreground threads, except the managed execution environment is not kept running
	- If the main thread dies, background threads will terminate abruptly

  Synchronization
	- Act of coordinating actions of multiple threads or tasks running concurrently
	- Necessary when running multiple threads to get predictable outcomes

  Blocking
	- Blocked threads do not consume CPU
	- Blocked threads do consume memory

  Spinning
	- Consumes CPU for as long as the thread is blocked

  Monitor
	- 
  